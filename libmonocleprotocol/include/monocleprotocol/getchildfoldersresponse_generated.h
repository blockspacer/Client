// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GETCHILDFOLDERSRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_GETCHILDFOLDERSRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct GetChildFoldersResponse;
struct GetChildFoldersResponseBuilder;

struct GetChildFoldersResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GetChildFoldersResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHILDFOLDERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *childfolders() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CHILDFOLDERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CHILDFOLDERS) &&
           verifier.VerifyVector(childfolders()) &&
           verifier.VerifyVectorOfStrings(childfolders()) &&
           verifier.EndTable();
  }
};

struct GetChildFoldersResponseBuilder {
  typedef GetChildFoldersResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_childfolders(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> childfolders) {
    fbb_.AddOffset(GetChildFoldersResponse::VT_CHILDFOLDERS, childfolders);
  }
  explicit GetChildFoldersResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GetChildFoldersResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetChildFoldersResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetChildFoldersResponse> CreateGetChildFoldersResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> childfolders = 0) {
  GetChildFoldersResponseBuilder builder_(_fbb);
  builder_.add_childfolders(childfolders);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetChildFoldersResponse> CreateGetChildFoldersResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *childfolders = nullptr) {
  auto childfolders__ = childfolders ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*childfolders) : 0;
  return monocle::CreateGetChildFoldersResponse(
      _fbb,
      childfolders__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_GETCHILDFOLDERSRESPONSE_MONOCLE_H_
