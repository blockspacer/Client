// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_DESTROYSTREAMREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_DESTROYSTREAMREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct DestroyStreamRequest;
struct DestroyStreamRequestBuilder;

struct DestroyStreamRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DestroyStreamRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STREAMTOKEN = 4
  };
  uint64_t streamtoken() const {
    return GetField<uint64_t>(VT_STREAMTOKEN, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_STREAMTOKEN) &&
           verifier.EndTable();
  }
};

struct DestroyStreamRequestBuilder {
  typedef DestroyStreamRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_streamtoken(uint64_t streamtoken) {
    fbb_.AddElement<uint64_t>(DestroyStreamRequest::VT_STREAMTOKEN, streamtoken, 0);
  }
  explicit DestroyStreamRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DestroyStreamRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DestroyStreamRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<DestroyStreamRequest> CreateDestroyStreamRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t streamtoken = 0) {
  DestroyStreamRequestBuilder builder_(_fbb);
  builder_.add_streamtoken(streamtoken);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_DESTROYSTREAMREQUEST_MONOCLE_H_
