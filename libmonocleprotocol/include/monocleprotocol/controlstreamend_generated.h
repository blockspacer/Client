// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONTROLSTREAMEND_MONOCLE_H_
#define FLATBUFFERS_GENERATED_CONTROLSTREAMEND_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "errorcode_generated.h"

namespace monocle {

struct ControlStreamEnd;
struct ControlStreamEndBuilder;

struct ControlStreamEnd FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ControlStreamEndBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_PLAYREQUESTINDEX = 6,
    VT_ERROR = 8
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  uint64_t playrequestindex() const {
    return GetField<uint64_t>(VT_PLAYREQUESTINDEX, 0);
  }
  monocle::ErrorCode error() const {
    return static_cast<monocle::ErrorCode>(GetField<uint16_t>(VT_ERROR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<uint64_t>(verifier, VT_PLAYREQUESTINDEX) &&
           VerifyField<uint16_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct ControlStreamEndBuilder {
  typedef ControlStreamEnd Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(ControlStreamEnd::VT_TOKEN, token, 0);
  }
  void add_playrequestindex(uint64_t playrequestindex) {
    fbb_.AddElement<uint64_t>(ControlStreamEnd::VT_PLAYREQUESTINDEX, playrequestindex, 0);
  }
  void add_error(monocle::ErrorCode error) {
    fbb_.AddElement<uint16_t>(ControlStreamEnd::VT_ERROR, static_cast<uint16_t>(error), 0);
  }
  explicit ControlStreamEndBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ControlStreamEnd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlStreamEnd>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlStreamEnd> CreateControlStreamEnd(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t playrequestindex = 0,
    monocle::ErrorCode error = monocle::ErrorCode::Success) {
  ControlStreamEndBuilder builder_(_fbb);
  builder_.add_playrequestindex(playrequestindex);
  builder_.add_token(token);
  builder_.add_error(error);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_CONTROLSTREAMEND_MONOCLE_H_
