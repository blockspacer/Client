// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NEWCODECINDEX_MONOCLE_H_
#define FLATBUFFERS_GENERATED_NEWCODECINDEX_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "codec_generated.h"
#include "codecindex_generated.h"

namespace monocle {

struct NewCodecIndex;
struct NewCodecIndexBuilder;

struct NewCodecIndex FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NewCodecIndexBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STREAM = 4,
    VT_CODECINDEX = 6
  };
  uint64_t stream() const {
    return GetField<uint64_t>(VT_STREAM, 0);
  }
  const monocle::CodecIndex *codecindex() const {
    return GetPointer<const monocle::CodecIndex *>(VT_CODECINDEX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_STREAM) &&
           VerifyOffset(verifier, VT_CODECINDEX) &&
           verifier.VerifyTable(codecindex()) &&
           verifier.EndTable();
  }
};

struct NewCodecIndexBuilder {
  typedef NewCodecIndex Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_stream(uint64_t stream) {
    fbb_.AddElement<uint64_t>(NewCodecIndex::VT_STREAM, stream, 0);
  }
  void add_codecindex(flatbuffers::Offset<monocle::CodecIndex> codecindex) {
    fbb_.AddOffset(NewCodecIndex::VT_CODECINDEX, codecindex);
  }
  explicit NewCodecIndexBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NewCodecIndex> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NewCodecIndex>(end);
    return o;
  }
};

inline flatbuffers::Offset<NewCodecIndex> CreateNewCodecIndex(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t stream = 0,
    flatbuffers::Offset<monocle::CodecIndex> codecindex = 0) {
  NewCodecIndexBuilder builder_(_fbb);
  builder_.add_stream(stream);
  builder_.add_codecindex(codecindex);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_NEWCODECINDEX_MONOCLE_H_
