// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRACKDELETEDATA_MONOCLE_H_
#define FLATBUFFERS_GENERATED_TRACKDELETEDATA_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct TrackDeleteData;
struct TrackDeleteDataBuilder;

struct TrackDeleteData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TrackDeleteDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDING = 4,
    VT_TRACK = 6,
    VT_START = 8,
    VT_END = 10
  };
  uint64_t recording() const {
    return GetField<uint64_t>(VT_RECORDING, 0);
  }
  uint32_t track() const {
    return GetField<uint32_t>(VT_TRACK, 0);
  }
  uint64_t start() const {
    return GetField<uint64_t>(VT_START, 0);
  }
  uint64_t end() const {
    return GetField<uint64_t>(VT_END, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RECORDING) &&
           VerifyField<uint32_t>(verifier, VT_TRACK) &&
           VerifyField<uint64_t>(verifier, VT_START) &&
           VerifyField<uint64_t>(verifier, VT_END) &&
           verifier.EndTable();
  }
};

struct TrackDeleteDataBuilder {
  typedef TrackDeleteData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recording(uint64_t recording) {
    fbb_.AddElement<uint64_t>(TrackDeleteData::VT_RECORDING, recording, 0);
  }
  void add_track(uint32_t track) {
    fbb_.AddElement<uint32_t>(TrackDeleteData::VT_TRACK, track, 0);
  }
  void add_start(uint64_t start) {
    fbb_.AddElement<uint64_t>(TrackDeleteData::VT_START, start, 0);
  }
  void add_end(uint64_t end) {
    fbb_.AddElement<uint64_t>(TrackDeleteData::VT_END, end, 0);
  }
  explicit TrackDeleteDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TrackDeleteData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TrackDeleteData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TrackDeleteData> CreateTrackDeleteData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recording = 0,
    uint32_t track = 0,
    uint64_t start = 0,
    uint64_t end = 0) {
  TrackDeleteDataBuilder builder_(_fbb);
  builder_.add_end(end);
  builder_.add_start(start);
  builder_.add_recording(recording);
  builder_.add_track(track);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_TRACKDELETEDATA_MONOCLE_H_
