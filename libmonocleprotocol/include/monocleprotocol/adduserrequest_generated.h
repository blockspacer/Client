// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ADDUSERREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_ADDUSERREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct AddUserRequest;
struct AddUserRequestBuilder;

struct AddUserRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AddUserRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_DIGEST = 6,
    VT_GROUP = 8
  };
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  const flatbuffers::String *digest() const {
    return GetPointer<const flatbuffers::String *>(VT_DIGEST);
  }
  uint64_t group() const {
    return GetField<uint64_t>(VT_GROUP, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_DIGEST) &&
           verifier.VerifyString(digest()) &&
           VerifyField<uint64_t>(verifier, VT_GROUP) &&
           verifier.EndTable();
  }
};

struct AddUserRequestBuilder {
  typedef AddUserRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(AddUserRequest::VT_USERNAME, username);
  }
  void add_digest(flatbuffers::Offset<flatbuffers::String> digest) {
    fbb_.AddOffset(AddUserRequest::VT_DIGEST, digest);
  }
  void add_group(uint64_t group) {
    fbb_.AddElement<uint64_t>(AddUserRequest::VT_GROUP, group, 0);
  }
  explicit AddUserRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AddUserRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddUserRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddUserRequest> CreateAddUserRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> username = 0,
    flatbuffers::Offset<flatbuffers::String> digest = 0,
    uint64_t group = 0) {
  AddUserRequestBuilder builder_(_fbb);
  builder_.add_group(group);
  builder_.add_digest(digest);
  builder_.add_username(username);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddUserRequest> CreateAddUserRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *digest = nullptr,
    uint64_t group = 0) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto digest__ = digest ? _fbb.CreateString(digest) : 0;
  return monocle::CreateAddUserRequest(
      _fbb,
      username__,
      digest__,
      group);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_ADDUSERREQUEST_MONOCLE_H_
