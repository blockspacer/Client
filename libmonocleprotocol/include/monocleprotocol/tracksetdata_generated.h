// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRACKSETDATA_MONOCLE_H_
#define FLATBUFFERS_GENERATED_TRACKSETDATA_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "index_generated.h"

namespace monocle {

struct TrackSetData;
struct TrackSetDataBuilder;

struct TrackSetData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TrackSetDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDING = 4,
    VT_TRACK = 6,
    VT_INDICES = 8
  };
  uint64_t recording() const {
    return GetField<uint64_t>(VT_RECORDING, 0);
  }
  uint32_t track() const {
    return GetField<uint32_t>(VT_TRACK, 0);
  }
  const flatbuffers::Vector<const monocle::INDEX *> *indices() const {
    return GetPointer<const flatbuffers::Vector<const monocle::INDEX *> *>(VT_INDICES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RECORDING) &&
           VerifyField<uint32_t>(verifier, VT_TRACK) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct TrackSetDataBuilder {
  typedef TrackSetData Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recording(uint64_t recording) {
    fbb_.AddElement<uint64_t>(TrackSetData::VT_RECORDING, recording, 0);
  }
  void add_track(uint32_t track) {
    fbb_.AddElement<uint32_t>(TrackSetData::VT_TRACK, track, 0);
  }
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<const monocle::INDEX *>> indices) {
    fbb_.AddOffset(TrackSetData::VT_INDICES, indices);
  }
  explicit TrackSetDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TrackSetData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TrackSetData>(end);
    return o;
  }
};

inline flatbuffers::Offset<TrackSetData> CreateTrackSetData(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recording = 0,
    uint32_t track = 0,
    flatbuffers::Offset<flatbuffers::Vector<const monocle::INDEX *>> indices = 0) {
  TrackSetDataBuilder builder_(_fbb);
  builder_.add_recording(recording);
  builder_.add_indices(indices);
  builder_.add_track(track);
  return builder_.Finish();
}

inline flatbuffers::Offset<TrackSetData> CreateTrackSetDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recording = 0,
    uint32_t track = 0,
    const std::vector<monocle::INDEX> *indices = nullptr) {
  auto indices__ = indices ? _fbb.CreateVectorOfStructs<monocle::INDEX>(*indices) : 0;
  return monocle::CreateTrackSetData(
      _fbb,
      recording,
      track,
      indices__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_TRACKSETDATA_MONOCLE_H_
