// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AUTHENTICATEREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_AUTHENTICATEREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct AuthenticateRequest;
struct AuthenticateRequestBuilder;

struct AuthenticateRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AuthenticateRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_CLIENTNONCE = 6,
    VT_AUTHDIGEST = 8
  };
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  const flatbuffers::String *clientnonce() const {
    return GetPointer<const flatbuffers::String *>(VT_CLIENTNONCE);
  }
  const flatbuffers::String *authdigest() const {
    return GetPointer<const flatbuffers::String *>(VT_AUTHDIGEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_CLIENTNONCE) &&
           verifier.VerifyString(clientnonce()) &&
           VerifyOffset(verifier, VT_AUTHDIGEST) &&
           verifier.VerifyString(authdigest()) &&
           verifier.EndTable();
  }
};

struct AuthenticateRequestBuilder {
  typedef AuthenticateRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(AuthenticateRequest::VT_USERNAME, username);
  }
  void add_clientnonce(flatbuffers::Offset<flatbuffers::String> clientnonce) {
    fbb_.AddOffset(AuthenticateRequest::VT_CLIENTNONCE, clientnonce);
  }
  void add_authdigest(flatbuffers::Offset<flatbuffers::String> authdigest) {
    fbb_.AddOffset(AuthenticateRequest::VT_AUTHDIGEST, authdigest);
  }
  explicit AuthenticateRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AuthenticateRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AuthenticateRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<AuthenticateRequest> CreateAuthenticateRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> username = 0,
    flatbuffers::Offset<flatbuffers::String> clientnonce = 0,
    flatbuffers::Offset<flatbuffers::String> authdigest = 0) {
  AuthenticateRequestBuilder builder_(_fbb);
  builder_.add_authdigest(authdigest);
  builder_.add_clientnonce(clientnonce);
  builder_.add_username(username);
  return builder_.Finish();
}

inline flatbuffers::Offset<AuthenticateRequest> CreateAuthenticateRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *clientnonce = nullptr,
    const char *authdigest = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto clientnonce__ = clientnonce ? _fbb.CreateString(clientnonce) : 0;
  auto authdigest__ = authdigest ? _fbb.CreateString(authdigest) : 0;
  return monocle::CreateAuthenticateRequest(
      _fbb,
      username__,
      clientnonce__,
      authdigest__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_AUTHENTICATEREQUEST_MONOCLE_H_
