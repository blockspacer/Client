// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECORDINGSSTATISTICS_MONOCLE_H_
#define FLATBUFFERS_GENERATED_RECORDINGSSTATISTICS_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct TrackStatistics;
struct TrackStatisticsBuilder;

struct RecordingStatistics;
struct RecordingStatisticsBuilder;

struct RecordingsStatistics;
struct RecordingsStatisticsBuilder;

struct TrackStatistics FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TrackStatisticsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TOTALDATARECEIVED = 6
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  uint64_t totaldatareceived() const {
    return GetField<uint64_t>(VT_TOTALDATARECEIVED, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint64_t>(verifier, VT_TOTALDATARECEIVED) &&
           verifier.EndTable();
  }
};

struct TrackStatisticsBuilder {
  typedef TrackStatistics Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(TrackStatistics::VT_ID, id, 0);
  }
  void add_totaldatareceived(uint64_t totaldatareceived) {
    fbb_.AddElement<uint64_t>(TrackStatistics::VT_TOTALDATARECEIVED, totaldatareceived, 0);
  }
  explicit TrackStatisticsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TrackStatistics> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TrackStatistics>(end);
    return o;
  }
};

inline flatbuffers::Offset<TrackStatistics> CreateTrackStatistics(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    uint64_t totaldatareceived = 0) {
  TrackStatisticsBuilder builder_(_fbb);
  builder_.add_totaldatareceived(totaldatareceived);
  builder_.add_id(id);
  return builder_.Finish();
}

struct RecordingStatistics FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingStatisticsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDINGTOKEN = 4,
    VT_TRACKSTATISTICS = 6
  };
  uint64_t recordingtoken() const {
    return GetField<uint64_t>(VT_RECORDINGTOKEN, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::TrackStatistics>> *trackstatistics() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::TrackStatistics>> *>(VT_TRACKSTATISTICS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGTOKEN) &&
           VerifyOffset(verifier, VT_TRACKSTATISTICS) &&
           verifier.VerifyVector(trackstatistics()) &&
           verifier.VerifyVectorOfTables(trackstatistics()) &&
           verifier.EndTable();
  }
};

struct RecordingStatisticsBuilder {
  typedef RecordingStatistics Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recordingtoken(uint64_t recordingtoken) {
    fbb_.AddElement<uint64_t>(RecordingStatistics::VT_RECORDINGTOKEN, recordingtoken, 0);
  }
  void add_trackstatistics(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::TrackStatistics>>> trackstatistics) {
    fbb_.AddOffset(RecordingStatistics::VT_TRACKSTATISTICS, trackstatistics);
  }
  explicit RecordingStatisticsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingStatistics> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingStatistics>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingStatistics> CreateRecordingStatistics(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recordingtoken = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::TrackStatistics>>> trackstatistics = 0) {
  RecordingStatisticsBuilder builder_(_fbb);
  builder_.add_recordingtoken(recordingtoken);
  builder_.add_trackstatistics(trackstatistics);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingStatistics> CreateRecordingStatisticsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recordingtoken = 0,
    const std::vector<flatbuffers::Offset<monocle::TrackStatistics>> *trackstatistics = nullptr) {
  auto trackstatistics__ = trackstatistics ? _fbb.CreateVector<flatbuffers::Offset<monocle::TrackStatistics>>(*trackstatistics) : 0;
  return monocle::CreateRecordingStatistics(
      _fbb,
      recordingtoken,
      trackstatistics__);
}

struct RecordingsStatistics FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingsStatisticsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_RECORDINGSSTATISTICS = 6
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingStatistics>> *recordingsstatistics() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingStatistics>> *>(VT_RECORDINGSSTATISTICS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           VerifyOffset(verifier, VT_RECORDINGSSTATISTICS) &&
           verifier.VerifyVector(recordingsstatistics()) &&
           verifier.VerifyVectorOfTables(recordingsstatistics()) &&
           verifier.EndTable();
  }
};

struct RecordingsStatisticsBuilder {
  typedef RecordingsStatistics Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(RecordingsStatistics::VT_TIME, time, 0);
  }
  void add_recordingsstatistics(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingStatistics>>> recordingsstatistics) {
    fbb_.AddOffset(RecordingsStatistics::VT_RECORDINGSSTATISTICS, recordingsstatistics);
  }
  explicit RecordingsStatisticsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingsStatistics> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingsStatistics>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingsStatistics> CreateRecordingsStatistics(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingStatistics>>> recordingsstatistics = 0) {
  RecordingsStatisticsBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_recordingsstatistics(recordingsstatistics);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingsStatistics> CreateRecordingsStatisticsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    const std::vector<flatbuffers::Offset<monocle::RecordingStatistics>> *recordingsstatistics = nullptr) {
  auto recordingsstatistics__ = recordingsstatistics ? _fbb.CreateVector<flatbuffers::Offset<monocle::RecordingStatistics>>(*recordingsstatistics) : 0;
  return monocle::CreateRecordingsStatistics(
      _fbb,
      time,
      recordingsstatistics__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_RECORDINGSSTATISTICS_MONOCLE_H_
