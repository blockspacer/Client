// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMRESULT_MONOCLE_H_
#define FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMRESULT_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "objects_generated.h"

namespace monocle {

struct ControlTrackStatisticsStreamObjectClassResult;

struct ControlTrackStatisticsStreamResult;

struct ControlTrackStatisticsStreamObjectClassResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTCLASS = 4,
    VT_COUNT = 6
  };
  monocle::ObjectClass objectclass() const {
    return static_cast<monocle::ObjectClass>(GetField<uint16_t>(VT_OBJECTCLASS, 0));
  }
  uint64_t count() const {
    return GetField<uint64_t>(VT_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTCLASS) &&
           VerifyField<uint64_t>(verifier, VT_COUNT) &&
           verifier.EndTable();
  }
};

struct ControlTrackStatisticsStreamObjectClassResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_objectclass(monocle::ObjectClass objectclass) {
    fbb_.AddElement<uint16_t>(ControlTrackStatisticsStreamObjectClassResult::VT_OBJECTCLASS, static_cast<uint16_t>(objectclass), 0);
  }
  void add_count(uint64_t count) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamObjectClassResult::VT_COUNT, count, 0);
  }
  explicit ControlTrackStatisticsStreamObjectClassResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ControlTrackStatisticsStreamObjectClassResultBuilder &operator=(const ControlTrackStatisticsStreamObjectClassResultBuilder &);
  flatbuffers::Offset<ControlTrackStatisticsStreamObjectClassResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlTrackStatisticsStreamObjectClassResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlTrackStatisticsStreamObjectClassResult> CreateControlTrackStatisticsStreamObjectClassResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    monocle::ObjectClass objectclass = monocle::ObjectClass::Human,
    uint64_t count = 0) {
  ControlTrackStatisticsStreamObjectClassResultBuilder builder_(_fbb);
  builder_.add_count(count);
  builder_.add_objectclass(objectclass);
  return builder_.Finish();
}

struct ControlTrackStatisticsStreamResult FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_REQUESTINDEX = 6,
    VT_STARTTIME = 8,
    VT_ENDTIME = 10,
    VT_RESULTS = 12
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  uint64_t requestindex() const {
    return GetField<uint64_t>(VT_REQUESTINDEX, 0);
  }
  uint64_t starttime() const {
    return GetField<uint64_t>(VT_STARTTIME, 0);
  }
  uint64_t endtime() const {
    return GetField<uint64_t>(VT_ENDTIME, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::ControlTrackStatisticsStreamObjectClassResult>> *results() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::ControlTrackStatisticsStreamObjectClassResult>> *>(VT_RESULTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<uint64_t>(verifier, VT_REQUESTINDEX) &&
           VerifyField<uint64_t>(verifier, VT_STARTTIME) &&
           VerifyField<uint64_t>(verifier, VT_ENDTIME) &&
           VerifyOffset(verifier, VT_RESULTS) &&
           verifier.VerifyVector(results()) &&
           verifier.VerifyVectorOfTables(results()) &&
           verifier.EndTable();
  }
};

struct ControlTrackStatisticsStreamResultBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamResult::VT_TOKEN, token, 0);
  }
  void add_requestindex(uint64_t requestindex) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamResult::VT_REQUESTINDEX, requestindex, 0);
  }
  void add_starttime(uint64_t starttime) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamResult::VT_STARTTIME, starttime, 0);
  }
  void add_endtime(uint64_t endtime) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamResult::VT_ENDTIME, endtime, 0);
  }
  void add_results(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::ControlTrackStatisticsStreamObjectClassResult>>> results) {
    fbb_.AddOffset(ControlTrackStatisticsStreamResult::VT_RESULTS, results);
  }
  explicit ControlTrackStatisticsStreamResultBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ControlTrackStatisticsStreamResultBuilder &operator=(const ControlTrackStatisticsStreamResultBuilder &);
  flatbuffers::Offset<ControlTrackStatisticsStreamResult> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlTrackStatisticsStreamResult>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlTrackStatisticsStreamResult> CreateControlTrackStatisticsStreamResult(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t requestindex = 0,
    uint64_t starttime = 0,
    uint64_t endtime = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::ControlTrackStatisticsStreamObjectClassResult>>> results = 0) {
  ControlTrackStatisticsStreamResultBuilder builder_(_fbb);
  builder_.add_endtime(endtime);
  builder_.add_starttime(starttime);
  builder_.add_requestindex(requestindex);
  builder_.add_token(token);
  builder_.add_results(results);
  return builder_.Finish();
}

inline flatbuffers::Offset<ControlTrackStatisticsStreamResult> CreateControlTrackStatisticsStreamResultDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t requestindex = 0,
    uint64_t starttime = 0,
    uint64_t endtime = 0,
    const std::vector<flatbuffers::Offset<monocle::ControlTrackStatisticsStreamObjectClassResult>> *results = nullptr) {
  auto results__ = results ? _fbb.CreateVector<flatbuffers::Offset<monocle::ControlTrackStatisticsStreamObjectClassResult>>(*results) : 0;
  return monocle::CreateControlTrackStatisticsStreamResult(
      _fbb,
      token,
      requestindex,
      starttime,
      endtime,
      results__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMRESULT_MONOCLE_H_
