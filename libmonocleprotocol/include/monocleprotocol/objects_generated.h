// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBJECTS_MONOCLE_H_
#define FLATBUFFERS_GENERATED_OBJECTS_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct Object;
struct ObjectBuilder;

struct Objects;
struct ObjectsBuilder;

enum class ObjectClass : uint16_t {
  Human = 0,
  Bicycle = 1,
  Car = 2,
  Motorbike = 3,
  Aeroplane = 4,
  Bus = 5,
  Train = 6,
  Truck = 7,
  Boat = 8,
  Cat = 15,
  Dog = 16,
  Horse = 17,
  Backpack = 24,
  Umbrella = 25,
  Handbag = 26,
  Suitcase = 29,
  MIN = Human,
  MAX = Suitcase
};

inline const ObjectClass (&EnumValuesObjectClass())[16] {
  static const ObjectClass values[] = {
    ObjectClass::Human,
    ObjectClass::Bicycle,
    ObjectClass::Car,
    ObjectClass::Motorbike,
    ObjectClass::Aeroplane,
    ObjectClass::Bus,
    ObjectClass::Train,
    ObjectClass::Truck,
    ObjectClass::Boat,
    ObjectClass::Cat,
    ObjectClass::Dog,
    ObjectClass::Horse,
    ObjectClass::Backpack,
    ObjectClass::Umbrella,
    ObjectClass::Handbag,
    ObjectClass::Suitcase
  };
  return values;
}

inline const char * const *EnumNamesObjectClass() {
  static const char * const names[31] = {
    "Human",
    "Bicycle",
    "Car",
    "Motorbike",
    "Aeroplane",
    "Bus",
    "Train",
    "Truck",
    "Boat",
    "",
    "",
    "",
    "",
    "",
    "",
    "Cat",
    "Dog",
    "Horse",
    "",
    "",
    "",
    "",
    "",
    "",
    "Backpack",
    "Umbrella",
    "Handbag",
    "",
    "",
    "Suitcase",
    nullptr
  };
  return names;
}

inline const char *EnumNameObjectClass(ObjectClass e) {
  if (flatbuffers::IsOutRange(e, ObjectClass::Human, ObjectClass::Suitcase)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesObjectClass()[index];
}

struct Object FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSID = 6,
    VT_CONFIDENCE = 8,
    VT_X = 10,
    VT_Y = 12,
    VT_WIDTH = 14,
    VT_HEIGHT = 16
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  monocle::ObjectClass classid() const {
    return static_cast<monocle::ObjectClass>(GetField<uint16_t>(VT_CLASSID, 0));
  }
  float confidence() const {
    return GetField<float>(VT_CONFIDENCE, 0.0f);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float width() const {
    return GetField<float>(VT_WIDTH, 0.0f);
  }
  float height() const {
    return GetField<float>(VT_HEIGHT, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<uint16_t>(verifier, VT_CLASSID) &&
           VerifyField<float>(verifier, VT_CONFIDENCE) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_WIDTH) &&
           VerifyField<float>(verifier, VT_HEIGHT) &&
           verifier.EndTable();
  }
};

struct ObjectBuilder {
  typedef Object Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(Object::VT_ID, id, 0);
  }
  void add_classid(monocle::ObjectClass classid) {
    fbb_.AddElement<uint16_t>(Object::VT_CLASSID, static_cast<uint16_t>(classid), 0);
  }
  void add_confidence(float confidence) {
    fbb_.AddElement<float>(Object::VT_CONFIDENCE, confidence, 0.0f);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(Object::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Object::VT_Y, y, 0.0f);
  }
  void add_width(float width) {
    fbb_.AddElement<float>(Object::VT_WIDTH, width, 0.0f);
  }
  void add_height(float height) {
    fbb_.AddElement<float>(Object::VT_HEIGHT, height, 0.0f);
  }
  explicit ObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Object> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Object>(end);
    return o;
  }
};

inline flatbuffers::Offset<Object> CreateObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    monocle::ObjectClass classid = monocle::ObjectClass::Human,
    float confidence = 0.0f,
    float x = 0.0f,
    float y = 0.0f,
    float width = 0.0f,
    float height = 0.0f) {
  ObjectBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_confidence(confidence);
  builder_.add_classid(classid);
  return builder_.Finish();
}

struct Objects FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<monocle::Object>> *objects() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::Object>> *>(VT_OBJECTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.VerifyVectorOfTables(objects()) &&
           verifier.EndTable();
  }
};

struct ObjectsBuilder {
  typedef Objects Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_objects(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::Object>>> objects) {
    fbb_.AddOffset(Objects::VT_OBJECTS, objects);
  }
  explicit ObjectsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Objects> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Objects>(end);
    return o;
  }
};

inline flatbuffers::Offset<Objects> CreateObjects(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::Object>>> objects = 0) {
  ObjectsBuilder builder_(_fbb);
  builder_.add_objects(objects);
  return builder_.Finish();
}

inline flatbuffers::Offset<Objects> CreateObjectsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<monocle::Object>> *objects = nullptr) {
  auto objects__ = objects ? _fbb.CreateVector<flatbuffers::Offset<monocle::Object>>(*objects) : 0;
  return monocle::CreateObjects(
      _fbb,
      objects__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_OBJECTS_MONOCLE_H_
