// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GETFILESRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_GETFILESRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "file_generated.h"
#include "filemonitorstate_generated.h"
#include "filestate_generated.h"

namespace monocle {

struct GetFilesResponse;
struct GetFilesResponseBuilder;

struct GetFilesResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GetFilesResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FILES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<monocle::File>> *files() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::File>> *>(VT_FILES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_FILES) &&
           verifier.VerifyVector(files()) &&
           verifier.VerifyVectorOfTables(files()) &&
           verifier.EndTable();
  }
};

struct GetFilesResponseBuilder {
  typedef GetFilesResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_files(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::File>>> files) {
    fbb_.AddOffset(GetFilesResponse::VT_FILES, files);
  }
  explicit GetFilesResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GetFilesResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetFilesResponse>(end);
    fbb_.Required(o, GetFilesResponse::VT_FILES);
    return o;
  }
};

inline flatbuffers::Offset<GetFilesResponse> CreateGetFilesResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::File>>> files = 0) {
  GetFilesResponseBuilder builder_(_fbb);
  builder_.add_files(files);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetFilesResponse> CreateGetFilesResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<monocle::File>> *files = nullptr) {
  auto files__ = files ? _fbb.CreateVector<flatbuffers::Offset<monocle::File>>(*files) : 0;
  return monocle::CreateGetFilesResponse(
      _fbb,
      files__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_GETFILESRESPONSE_MONOCLE_H_
