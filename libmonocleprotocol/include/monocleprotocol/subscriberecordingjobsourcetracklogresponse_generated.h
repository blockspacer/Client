// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGJOBSOURCETRACKLOGRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGJOBSOURCETRACKLOGRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "logmessage_generated.h"
#include "severity_generated.h"

namespace monocle {

struct RecordingJobSourceTrackLogMessages;
struct RecordingJobSourceTrackLogMessagesBuilder;

struct SubscribeRecordingJobSourceTrackLogResponse;
struct SubscribeRecordingJobSourceTrackLogResponseBuilder;

struct RecordingJobSourceTrackLogMessages FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingJobSourceTrackLogMessagesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDINGJOBTOKEN = 4,
    VT_RECORDINGJOBSOURCETOKEN = 6,
    VT_TOKEN = 8,
    VT_MESSAGES = 10
  };
  uint64_t recordingjobtoken() const {
    return GetField<uint64_t>(VT_RECORDINGJOBTOKEN, 0);
  }
  uint64_t recordingjobsourcetoken() const {
    return GetField<uint64_t>(VT_RECORDINGJOBSOURCETOKEN, 0);
  }
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>> *messages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>> *>(VT_MESSAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGJOBTOKEN) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGJOBSOURCETOKEN) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyOffset(verifier, VT_MESSAGES) &&
           verifier.VerifyVector(messages()) &&
           verifier.VerifyVectorOfTables(messages()) &&
           verifier.EndTable();
  }
};

struct RecordingJobSourceTrackLogMessagesBuilder {
  typedef RecordingJobSourceTrackLogMessages Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recordingjobtoken(uint64_t recordingjobtoken) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrackLogMessages::VT_RECORDINGJOBTOKEN, recordingjobtoken, 0);
  }
  void add_recordingjobsourcetoken(uint64_t recordingjobsourcetoken) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrackLogMessages::VT_RECORDINGJOBSOURCETOKEN, recordingjobsourcetoken, 0);
  }
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrackLogMessages::VT_TOKEN, token, 0);
  }
  void add_messages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>>> messages) {
    fbb_.AddOffset(RecordingJobSourceTrackLogMessages::VT_MESSAGES, messages);
  }
  explicit RecordingJobSourceTrackLogMessagesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingJobSourceTrackLogMessages> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingJobSourceTrackLogMessages>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingJobSourceTrackLogMessages> CreateRecordingJobSourceTrackLogMessages(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recordingjobtoken = 0,
    uint64_t recordingjobsourcetoken = 0,
    uint64_t token = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>>> messages = 0) {
  RecordingJobSourceTrackLogMessagesBuilder builder_(_fbb);
  builder_.add_token(token);
  builder_.add_recordingjobsourcetoken(recordingjobsourcetoken);
  builder_.add_recordingjobtoken(recordingjobtoken);
  builder_.add_messages(messages);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingJobSourceTrackLogMessages> CreateRecordingJobSourceTrackLogMessagesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recordingjobtoken = 0,
    uint64_t recordingjobsourcetoken = 0,
    uint64_t token = 0,
    const std::vector<flatbuffers::Offset<monocle::LogMessage>> *messages = nullptr) {
  auto messages__ = messages ? _fbb.CreateVector<flatbuffers::Offset<monocle::LogMessage>>(*messages) : 0;
  return monocle::CreateRecordingJobSourceTrackLogMessages(
      _fbb,
      recordingjobtoken,
      recordingjobsourcetoken,
      token,
      messages__);
}

struct SubscribeRecordingJobSourceTrackLogResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SubscribeRecordingJobSourceTrackLogResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDINGJOBSOURCETRACKLOGMESSAGES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrackLogMessages>> *recordingjobsourcetracklogmessages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrackLogMessages>> *>(VT_RECORDINGJOBSOURCETRACKLOGMESSAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDINGJOBSOURCETRACKLOGMESSAGES) &&
           verifier.VerifyVector(recordingjobsourcetracklogmessages()) &&
           verifier.VerifyVectorOfTables(recordingjobsourcetracklogmessages()) &&
           verifier.EndTable();
  }
};

struct SubscribeRecordingJobSourceTrackLogResponseBuilder {
  typedef SubscribeRecordingJobSourceTrackLogResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recordingjobsourcetracklogmessages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrackLogMessages>>> recordingjobsourcetracklogmessages) {
    fbb_.AddOffset(SubscribeRecordingJobSourceTrackLogResponse::VT_RECORDINGJOBSOURCETRACKLOGMESSAGES, recordingjobsourcetracklogmessages);
  }
  explicit SubscribeRecordingJobSourceTrackLogResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SubscribeRecordingJobSourceTrackLogResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubscribeRecordingJobSourceTrackLogResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubscribeRecordingJobSourceTrackLogResponse> CreateSubscribeRecordingJobSourceTrackLogResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrackLogMessages>>> recordingjobsourcetracklogmessages = 0) {
  SubscribeRecordingJobSourceTrackLogResponseBuilder builder_(_fbb);
  builder_.add_recordingjobsourcetracklogmessages(recordingjobsourcetracklogmessages);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubscribeRecordingJobSourceTrackLogResponse> CreateSubscribeRecordingJobSourceTrackLogResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<monocle::RecordingJobSourceTrackLogMessages>> *recordingjobsourcetracklogmessages = nullptr) {
  auto recordingjobsourcetracklogmessages__ = recordingjobsourcetracklogmessages ? _fbb.CreateVector<flatbuffers::Offset<monocle::RecordingJobSourceTrackLogMessages>>(*recordingjobsourcetracklogmessages) : 0;
  return monocle::CreateSubscribeRecordingJobSourceTrackLogResponse(
      _fbb,
      recordingjobsourcetracklogmessages__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGJOBSOURCETRACKLOGRESPONSE_MONOCLE_H_
