// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEADER_MONOCLE_H_
#define FLATBUFFERS_GENERATED_HEADER_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

enum class HeaderFlags : uint32_t {
  FLAG_ERROR = 1,
  FLAG_COMPRESSED = 2,
  NONE = 0,
  ANY = 3
};
FLATBUFFERS_DEFINE_BITMASK_OPERATORS(HeaderFlags, uint32_t)

inline const HeaderFlags (&EnumValuesHeaderFlags())[2] {
  static const HeaderFlags values[] = {
    HeaderFlags::FLAG_ERROR,
    HeaderFlags::FLAG_COMPRESSED
  };
  return values;
}

inline const char * const *EnumNamesHeaderFlags() {
  static const char * const names[3] = {
    "FLAG_ERROR",
    "FLAG_COMPRESSED",
    nullptr
  };
  return names;
}

inline const char *EnumNameHeaderFlags(HeaderFlags e) {
  if (flatbuffers::IsOutRange(e, HeaderFlags::FLAG_ERROR, HeaderFlags::FLAG_COMPRESSED)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(HeaderFlags::FLAG_ERROR);
  return EnumNamesHeaderFlags()[index];
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_HEADER_MONOCLE_H_
