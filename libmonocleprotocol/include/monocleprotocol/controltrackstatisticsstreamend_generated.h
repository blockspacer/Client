// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMEND_MONOCLE_H_
#define FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMEND_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "errorcode_generated.h"

namespace monocle {

struct ControlTrackStatisticsStreamEnd;

struct ControlTrackStatisticsStreamEnd FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_REQUESTINDEX = 6,
    VT_ERROR = 8
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  uint64_t requestindex() const {
    return GetField<uint64_t>(VT_REQUESTINDEX, 0);
  }
  monocle::ErrorCode error() const {
    return static_cast<monocle::ErrorCode>(GetField<uint16_t>(VT_ERROR, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<uint64_t>(verifier, VT_REQUESTINDEX) &&
           VerifyField<uint16_t>(verifier, VT_ERROR) &&
           verifier.EndTable();
  }
};

struct ControlTrackStatisticsStreamEndBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamEnd::VT_TOKEN, token, 0);
  }
  void add_requestindex(uint64_t requestindex) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamEnd::VT_REQUESTINDEX, requestindex, 0);
  }
  void add_error(monocle::ErrorCode error) {
    fbb_.AddElement<uint16_t>(ControlTrackStatisticsStreamEnd::VT_ERROR, static_cast<uint16_t>(error), 0);
  }
  explicit ControlTrackStatisticsStreamEndBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ControlTrackStatisticsStreamEndBuilder &operator=(const ControlTrackStatisticsStreamEndBuilder &);
  flatbuffers::Offset<ControlTrackStatisticsStreamEnd> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlTrackStatisticsStreamEnd>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlTrackStatisticsStreamEnd> CreateControlTrackStatisticsStreamEnd(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t requestindex = 0,
    monocle::ErrorCode error = monocle::ErrorCode::Success) {
  ControlTrackStatisticsStreamEndBuilder builder_(_fbb);
  builder_.add_requestindex(requestindex);
  builder_.add_token(token);
  builder_.add_error(error);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMEND_MONOCLE_H_
