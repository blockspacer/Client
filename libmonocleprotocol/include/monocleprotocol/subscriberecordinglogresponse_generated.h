// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGLOGRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGLOGRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "logmessage_generated.h"
#include "severity_generated.h"

namespace monocle {

struct SubscribeRecordingLogResponse;
struct SubscribeRecordingLogResponseBuilder;

struct SubscribeRecordingLogResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SubscribeRecordingLogResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>> *messages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>> *>(VT_MESSAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESSAGES) &&
           verifier.VerifyVector(messages()) &&
           verifier.VerifyVectorOfTables(messages()) &&
           verifier.EndTable();
  }
};

struct SubscribeRecordingLogResponseBuilder {
  typedef SubscribeRecordingLogResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_messages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>>> messages) {
    fbb_.AddOffset(SubscribeRecordingLogResponse::VT_MESSAGES, messages);
  }
  explicit SubscribeRecordingLogResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SubscribeRecordingLogResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubscribeRecordingLogResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubscribeRecordingLogResponse> CreateSubscribeRecordingLogResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>>> messages = 0) {
  SubscribeRecordingLogResponseBuilder builder_(_fbb);
  builder_.add_messages(messages);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubscribeRecordingLogResponse> CreateSubscribeRecordingLogResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<monocle::LogMessage>> *messages = nullptr) {
  auto messages__ = messages ? _fbb.CreateVector<flatbuffers::Offset<monocle::LogMessage>>(*messages) : 0;
  return monocle::CreateSubscribeRecordingLogResponse(
      _fbb,
      messages__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGLOGRESPONSE_MONOCLE_H_
