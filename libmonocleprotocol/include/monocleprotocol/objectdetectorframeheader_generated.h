// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OBJECTDETECTORFRAMEHEADER_MONOCLE_H_
#define FLATBUFFERS_GENERATED_OBJECTDETECTORFRAMEHEADER_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "objectdetectorframetype_generated.h"

namespace monocle {

struct ObjectDetectorFrameHeader;
struct ObjectDetectorFrameHeaderBuilder;

struct ObjectDetectorFrameHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectDetectorFrameHeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_PLAYREQUESTINDEX = 6,
    VT_CODECINDEX = 8,
    VT_MARKER = 10,
    VT_TIMESTAMP = 12,
    VT_SEQUENCENUM = 14,
    VT_PROGRESS = 16,
    VT_SIGNATURE = 18,
    VT_OBJECTDETECTORFRAMETYPE = 20
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  uint64_t playrequestindex() const {
    return GetField<uint64_t>(VT_PLAYREQUESTINDEX, 0);
  }
  uint64_t codecindex() const {
    return GetField<uint64_t>(VT_CODECINDEX, 0);
  }
  bool marker() const {
    return GetField<uint8_t>(VT_MARKER, 0) != 0;
  }
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  int64_t sequencenum() const {
    return GetField<int64_t>(VT_SEQUENCENUM, 0);
  }
  float progress() const {
    return GetField<float>(VT_PROGRESS, 0.0f);
  }
  const flatbuffers::Vector<uint8_t> *signature() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_SIGNATURE);
  }
  monocle::ObjectDetectorFrameType objectdetectorframetype() const {
    return static_cast<monocle::ObjectDetectorFrameType>(GetField<uint16_t>(VT_OBJECTDETECTORFRAMETYPE, 1));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<uint64_t>(verifier, VT_PLAYREQUESTINDEX) &&
           VerifyField<uint64_t>(verifier, VT_CODECINDEX) &&
           VerifyField<uint8_t>(verifier, VT_MARKER) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP) &&
           VerifyField<int64_t>(verifier, VT_SEQUENCENUM) &&
           VerifyField<float>(verifier, VT_PROGRESS) &&
           VerifyOffset(verifier, VT_SIGNATURE) &&
           verifier.VerifyVector(signature()) &&
           VerifyField<uint16_t>(verifier, VT_OBJECTDETECTORFRAMETYPE) &&
           verifier.EndTable();
  }
};

struct ObjectDetectorFrameHeaderBuilder {
  typedef ObjectDetectorFrameHeader Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(ObjectDetectorFrameHeader::VT_TOKEN, token, 0);
  }
  void add_playrequestindex(uint64_t playrequestindex) {
    fbb_.AddElement<uint64_t>(ObjectDetectorFrameHeader::VT_PLAYREQUESTINDEX, playrequestindex, 0);
  }
  void add_codecindex(uint64_t codecindex) {
    fbb_.AddElement<uint64_t>(ObjectDetectorFrameHeader::VT_CODECINDEX, codecindex, 0);
  }
  void add_marker(bool marker) {
    fbb_.AddElement<uint8_t>(ObjectDetectorFrameHeader::VT_MARKER, static_cast<uint8_t>(marker), 0);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(ObjectDetectorFrameHeader::VT_TIMESTAMP, timestamp, 0);
  }
  void add_sequencenum(int64_t sequencenum) {
    fbb_.AddElement<int64_t>(ObjectDetectorFrameHeader::VT_SEQUENCENUM, sequencenum, 0);
  }
  void add_progress(float progress) {
    fbb_.AddElement<float>(ObjectDetectorFrameHeader::VT_PROGRESS, progress, 0.0f);
  }
  void add_signature(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature) {
    fbb_.AddOffset(ObjectDetectorFrameHeader::VT_SIGNATURE, signature);
  }
  void add_objectdetectorframetype(monocle::ObjectDetectorFrameType objectdetectorframetype) {
    fbb_.AddElement<uint16_t>(ObjectDetectorFrameHeader::VT_OBJECTDETECTORFRAMETYPE, static_cast<uint16_t>(objectdetectorframetype), 1);
  }
  explicit ObjectDetectorFrameHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ObjectDetectorFrameHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ObjectDetectorFrameHeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjectDetectorFrameHeader> CreateObjectDetectorFrameHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t playrequestindex = 0,
    uint64_t codecindex = 0,
    bool marker = false,
    uint64_t timestamp = 0,
    int64_t sequencenum = 0,
    float progress = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> signature = 0,
    monocle::ObjectDetectorFrameType objectdetectorframetype = monocle::ObjectDetectorFrameType::OBJECT_DETECTION) {
  ObjectDetectorFrameHeaderBuilder builder_(_fbb);
  builder_.add_sequencenum(sequencenum);
  builder_.add_timestamp(timestamp);
  builder_.add_codecindex(codecindex);
  builder_.add_playrequestindex(playrequestindex);
  builder_.add_token(token);
  builder_.add_signature(signature);
  builder_.add_progress(progress);
  builder_.add_objectdetectorframetype(objectdetectorframetype);
  builder_.add_marker(marker);
  return builder_.Finish();
}

inline flatbuffers::Offset<ObjectDetectorFrameHeader> CreateObjectDetectorFrameHeaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t playrequestindex = 0,
    uint64_t codecindex = 0,
    bool marker = false,
    uint64_t timestamp = 0,
    int64_t sequencenum = 0,
    float progress = 0.0f,
    const std::vector<uint8_t> *signature = nullptr,
    monocle::ObjectDetectorFrameType objectdetectorframetype = monocle::ObjectDetectorFrameType::OBJECT_DETECTION) {
  auto signature__ = signature ? _fbb.CreateVector<uint8_t>(*signature) : 0;
  return monocle::CreateObjectDetectorFrameHeader(
      _fbb,
      token,
      playrequestindex,
      codecindex,
      marker,
      timestamp,
      sequencenum,
      progress,
      signature__,
      objectdetectorframetype);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_OBJECTDETECTORFRAMEHEADER_MONOCLE_H_
