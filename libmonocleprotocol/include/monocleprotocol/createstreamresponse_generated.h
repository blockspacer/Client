// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREATESTREAMRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_CREATESTREAMRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "codec_generated.h"
#include "codecindex_generated.h"

namespace monocle {

struct CreateStreamResponse;
struct CreateStreamResponseBuilder;

struct CreateStreamResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreateStreamResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_CODECINDICES = 6
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::CodecIndex>> *codecindices() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::CodecIndex>> *>(VT_CODECINDICES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyOffset(verifier, VT_CODECINDICES) &&
           verifier.VerifyVector(codecindices()) &&
           verifier.VerifyVectorOfTables(codecindices()) &&
           verifier.EndTable();
  }
};

struct CreateStreamResponseBuilder {
  typedef CreateStreamResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(CreateStreamResponse::VT_TOKEN, token, 0);
  }
  void add_codecindices(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::CodecIndex>>> codecindices) {
    fbb_.AddOffset(CreateStreamResponse::VT_CODECINDICES, codecindices);
  }
  explicit CreateStreamResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreateStreamResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreateStreamResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateStreamResponse> CreateCreateStreamResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::CodecIndex>>> codecindices = 0) {
  CreateStreamResponseBuilder builder_(_fbb);
  builder_.add_token(token);
  builder_.add_codecindices(codecindices);
  return builder_.Finish();
}

inline flatbuffers::Offset<CreateStreamResponse> CreateCreateStreamResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    const std::vector<flatbuffers::Offset<monocle::CodecIndex>> *codecindices = nullptr) {
  auto codecindices__ = codecindices ? _fbb.CreateVector<flatbuffers::Offset<monocle::CodecIndex>>(*codecindices) : 0;
  return monocle::CreateCreateStreamResponse(
      _fbb,
      token,
      codecindices__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_CREATESTREAMRESPONSE_MONOCLE_H_
