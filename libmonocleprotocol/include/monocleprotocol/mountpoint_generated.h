// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOUNTPOINT_MONOCLE_H_
#define FLATBUFFERS_GENERATED_MOUNTPOINT_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct MountPoint;
struct MountPointBuilder;

struct MountPoint FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MountPointBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_PARENTID = 6,
    VT_MAJORSTDEV = 8,
    VT_MINORSTDEV = 10,
    VT_PATH = 12,
    VT_TYPE = 14,
    VT_SOURCE = 16
  };
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  uint64_t parentid() const {
    return GetField<uint64_t>(VT_PARENTID, 0);
  }
  uint64_t majorstdev() const {
    return GetField<uint64_t>(VT_MAJORSTDEV, 0);
  }
  uint64_t minorstdev() const {
    return GetField<uint64_t>(VT_MINORSTDEV, 0);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::String *source() const {
    return GetPointer<const flatbuffers::String *>(VT_SOURCE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ID) &&
           VerifyField<uint64_t>(verifier, VT_PARENTID) &&
           VerifyField<uint64_t>(verifier, VT_MAJORSTDEV) &&
           VerifyField<uint64_t>(verifier, VT_MINORSTDEV) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           verifier.EndTable();
  }
};

struct MountPointBuilder {
  typedef MountPoint Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(MountPoint::VT_ID, id, 0);
  }
  void add_parentid(uint64_t parentid) {
    fbb_.AddElement<uint64_t>(MountPoint::VT_PARENTID, parentid, 0);
  }
  void add_majorstdev(uint64_t majorstdev) {
    fbb_.AddElement<uint64_t>(MountPoint::VT_MAJORSTDEV, majorstdev, 0);
  }
  void add_minorstdev(uint64_t minorstdev) {
    fbb_.AddElement<uint64_t>(MountPoint::VT_MINORSTDEV, minorstdev, 0);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(MountPoint::VT_PATH, path);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(MountPoint::VT_TYPE, type);
  }
  void add_source(flatbuffers::Offset<flatbuffers::String> source) {
    fbb_.AddOffset(MountPoint::VT_SOURCE, source);
  }
  explicit MountPointBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MountPoint> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MountPoint>(end);
    return o;
  }
};

inline flatbuffers::Offset<MountPoint> CreateMountPoint(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t parentid = 0,
    uint64_t majorstdev = 0,
    uint64_t minorstdev = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::String> source = 0) {
  MountPointBuilder builder_(_fbb);
  builder_.add_minorstdev(minorstdev);
  builder_.add_majorstdev(majorstdev);
  builder_.add_parentid(parentid);
  builder_.add_id(id);
  builder_.add_source(source);
  builder_.add_type(type);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<MountPoint> CreateMountPointDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t id = 0,
    uint64_t parentid = 0,
    uint64_t majorstdev = 0,
    uint64_t minorstdev = 0,
    const char *path = nullptr,
    const char *type = nullptr,
    const char *source = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  return monocle::CreateMountPoint(
      _fbb,
      id,
      parentid,
      majorstdev,
      minorstdev,
      path__,
      type__,
      source__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_MOUNTPOINT_MONOCLE_H_
