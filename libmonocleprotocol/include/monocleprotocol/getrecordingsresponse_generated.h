// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GETRECORDINGSRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_GETRECORDINGSRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "codec_generated.h"
#include "codecindex_generated.h"
#include "index_generated.h"
#include "recording_generated.h"
#include "recordingjob_generated.h"
#include "recordingjobsource_generated.h"
#include "recordingjobsourcetrack_generated.h"
#include "recordingjobsourcetype_generated.h"
#include "recordingjobstate_generated.h"
#include "recordingtrack_generated.h"
#include "token_generated.h"
#include "trackdata_generated.h"
#include "tracktype_generated.h"

namespace monocle {

struct GetRecordingsResponse;
struct GetRecordingsResponseBuilder;

struct GetRecordingsResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GetRecordingsResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDINGS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<monocle::Recording>> *recordings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::Recording>> *>(VT_RECORDINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDINGS) &&
           verifier.VerifyVector(recordings()) &&
           verifier.VerifyVectorOfTables(recordings()) &&
           verifier.EndTable();
  }
};

struct GetRecordingsResponseBuilder {
  typedef GetRecordingsResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recordings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::Recording>>> recordings) {
    fbb_.AddOffset(GetRecordingsResponse::VT_RECORDINGS, recordings);
  }
  explicit GetRecordingsResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GetRecordingsResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetRecordingsResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetRecordingsResponse> CreateGetRecordingsResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::Recording>>> recordings = 0) {
  GetRecordingsResponseBuilder builder_(_fbb);
  builder_.add_recordings(recordings);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetRecordingsResponse> CreateGetRecordingsResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<monocle::Recording>> *recordings = nullptr) {
  auto recordings__ = recordings ? _fbb.CreateVector<flatbuffers::Offset<monocle::Recording>>(*recordings) : 0;
  return monocle::CreateGetRecordingsResponse(
      _fbb,
      recordings__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_GETRECORDINGSRESPONSE_MONOCLE_H_
