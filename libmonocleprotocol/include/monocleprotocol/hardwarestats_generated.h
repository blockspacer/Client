// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HARDWARESTATS_MONOCLE_H_
#define FLATBUFFERS_GENERATED_HARDWARESTATS_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "diskstat_generated.h"
#include "gpustat_generated.h"

namespace monocle {

struct HardwareStats;
struct HardwareStatsBuilder;

struct HardwareStats FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HardwareStatsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_DISKSTATS = 6,
    VT_CPUUSAGE = 8,
    VT_TOTALMEMORY = 10,
    VT_AVAILABLEMEMORY = 12,
    VT_GPUSTATS = 14
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::DiskStat>> *diskstats() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::DiskStat>> *>(VT_DISKSTATS);
  }
  double cpuusage() const {
    return GetField<double>(VT_CPUUSAGE, 0.0);
  }
  uint64_t totalmemory() const {
    return GetField<uint64_t>(VT_TOTALMEMORY, 0);
  }
  uint64_t availablememory() const {
    return GetField<uint64_t>(VT_AVAILABLEMEMORY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::GPUStat>> *gpustats() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::GPUStat>> *>(VT_GPUSTATS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           VerifyOffset(verifier, VT_DISKSTATS) &&
           verifier.VerifyVector(diskstats()) &&
           verifier.VerifyVectorOfTables(diskstats()) &&
           VerifyField<double>(verifier, VT_CPUUSAGE) &&
           VerifyField<uint64_t>(verifier, VT_TOTALMEMORY) &&
           VerifyField<uint64_t>(verifier, VT_AVAILABLEMEMORY) &&
           VerifyOffset(verifier, VT_GPUSTATS) &&
           verifier.VerifyVector(gpustats()) &&
           verifier.VerifyVectorOfTables(gpustats()) &&
           verifier.EndTable();
  }
};

struct HardwareStatsBuilder {
  typedef HardwareStats Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(HardwareStats::VT_TIME, time, 0);
  }
  void add_diskstats(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::DiskStat>>> diskstats) {
    fbb_.AddOffset(HardwareStats::VT_DISKSTATS, diskstats);
  }
  void add_cpuusage(double cpuusage) {
    fbb_.AddElement<double>(HardwareStats::VT_CPUUSAGE, cpuusage, 0.0);
  }
  void add_totalmemory(uint64_t totalmemory) {
    fbb_.AddElement<uint64_t>(HardwareStats::VT_TOTALMEMORY, totalmemory, 0);
  }
  void add_availablememory(uint64_t availablememory) {
    fbb_.AddElement<uint64_t>(HardwareStats::VT_AVAILABLEMEMORY, availablememory, 0);
  }
  void add_gpustats(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::GPUStat>>> gpustats) {
    fbb_.AddOffset(HardwareStats::VT_GPUSTATS, gpustats);
  }
  explicit HardwareStatsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<HardwareStats> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HardwareStats>(end);
    return o;
  }
};

inline flatbuffers::Offset<HardwareStats> CreateHardwareStats(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::DiskStat>>> diskstats = 0,
    double cpuusage = 0.0,
    uint64_t totalmemory = 0,
    uint64_t availablememory = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::GPUStat>>> gpustats = 0) {
  HardwareStatsBuilder builder_(_fbb);
  builder_.add_availablememory(availablememory);
  builder_.add_totalmemory(totalmemory);
  builder_.add_cpuusage(cpuusage);
  builder_.add_time(time);
  builder_.add_gpustats(gpustats);
  builder_.add_diskstats(diskstats);
  return builder_.Finish();
}

inline flatbuffers::Offset<HardwareStats> CreateHardwareStatsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    const std::vector<flatbuffers::Offset<monocle::DiskStat>> *diskstats = nullptr,
    double cpuusage = 0.0,
    uint64_t totalmemory = 0,
    uint64_t availablememory = 0,
    const std::vector<flatbuffers::Offset<monocle::GPUStat>> *gpustats = nullptr) {
  auto diskstats__ = diskstats ? _fbb.CreateVector<flatbuffers::Offset<monocle::DiskStat>>(*diskstats) : 0;
  auto gpustats__ = gpustats ? _fbb.CreateVector<flatbuffers::Offset<monocle::GPUStat>>(*gpustats) : 0;
  return monocle::CreateHardwareStats(
      _fbb,
      time,
      diskstats__,
      cpuusage,
      totalmemory,
      availablememory,
      gpustats__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_HARDWARESTATS_MONOCLE_H_
