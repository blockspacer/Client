// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECORDINGJOB_MONOCLE_H_
#define FLATBUFFERS_GENERATED_RECORDINGJOB_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "recordingjobsource_generated.h"
#include "recordingjobsourcetrack_generated.h"
#include "recordingjobsourcetype_generated.h"
#include "recordingjobstate_generated.h"

namespace monocle {

struct RecordingJob;
struct RecordingJobBuilder;

struct RecordingJob FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingJobBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_NAME = 6,
    VT_ENABLED = 8,
    VT_PRIORITY = 10,
    VT_RECORDINGJOBSOURCES = 12,
    VT_STATE = 14
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool enabled() const {
    return GetField<uint8_t>(VT_ENABLED, 0) != 0;
  }
  uint64_t priority() const {
    return GetField<uint64_t>(VT_PRIORITY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSource>> *recordingjobsources() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSource>> *>(VT_RECORDINGJOBSOURCES);
  }
  monocle::RecordingJobState state() const {
    return static_cast<monocle::RecordingJobState>(GetField<int8_t>(VT_STATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_ENABLED) &&
           VerifyField<uint64_t>(verifier, VT_PRIORITY) &&
           VerifyOffset(verifier, VT_RECORDINGJOBSOURCES) &&
           verifier.VerifyVector(recordingjobsources()) &&
           verifier.VerifyVectorOfTables(recordingjobsources()) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           verifier.EndTable();
  }
};

struct RecordingJobBuilder {
  typedef RecordingJob Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(RecordingJob::VT_TOKEN, token, 0);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(RecordingJob::VT_NAME, name);
  }
  void add_enabled(bool enabled) {
    fbb_.AddElement<uint8_t>(RecordingJob::VT_ENABLED, static_cast<uint8_t>(enabled), 0);
  }
  void add_priority(uint64_t priority) {
    fbb_.AddElement<uint64_t>(RecordingJob::VT_PRIORITY, priority, 0);
  }
  void add_recordingjobsources(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSource>>> recordingjobsources) {
    fbb_.AddOffset(RecordingJob::VT_RECORDINGJOBSOURCES, recordingjobsources);
  }
  void add_state(monocle::RecordingJobState state) {
    fbb_.AddElement<int8_t>(RecordingJob::VT_STATE, static_cast<int8_t>(state), 0);
  }
  explicit RecordingJobBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingJob> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingJob>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingJob> CreateRecordingJob(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    bool enabled = false,
    uint64_t priority = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSource>>> recordingjobsources = 0,
    monocle::RecordingJobState state = monocle::RecordingJobState::Idle) {
  RecordingJobBuilder builder_(_fbb);
  builder_.add_priority(priority);
  builder_.add_token(token);
  builder_.add_recordingjobsources(recordingjobsources);
  builder_.add_name(name);
  builder_.add_state(state);
  builder_.add_enabled(enabled);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingJob> CreateRecordingJobDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    const char *name = nullptr,
    bool enabled = false,
    uint64_t priority = 0,
    const std::vector<flatbuffers::Offset<monocle::RecordingJobSource>> *recordingjobsources = nullptr,
    monocle::RecordingJobState state = monocle::RecordingJobState::Idle) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto recordingjobsources__ = recordingjobsources ? _fbb.CreateVector<flatbuffers::Offset<monocle::RecordingJobSource>>(*recordingjobsources) : 0;
  return monocle::CreateRecordingJob(
      _fbb,
      token,
      name__,
      enabled,
      priority,
      recordingjobsources__,
      state);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_RECORDINGJOB_MONOCLE_H_
