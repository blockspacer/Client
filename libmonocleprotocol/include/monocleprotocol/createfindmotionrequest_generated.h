// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CREATEFINDMOTIONREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_CREATEFINDMOTIONREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct CreateFindMotionRequest;
struct CreateFindMotionRequestBuilder;

struct CreateFindMotionRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CreateFindMotionRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDINGTOKEN = 4,
    VT_TRACKID = 6,
    VT_STARTTIME = 8,
    VT_ENDTIME = 10,
    VT_X = 12,
    VT_Y = 14,
    VT_WIDTH = 16,
    VT_HEIGHT = 18,
    VT_SENSITIVITY = 20,
    VT_FAST = 22
  };
  uint64_t recordingtoken() const {
    return GetField<uint64_t>(VT_RECORDINGTOKEN, 0);
  }
  uint32_t trackid() const {
    return GetField<uint32_t>(VT_TRACKID, 0);
  }
  uint64_t starttime() const {
    return GetField<uint64_t>(VT_STARTTIME, 0);
  }
  uint64_t endtime() const {
    return GetField<uint64_t>(VT_ENDTIME, 0);
  }
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float width() const {
    return GetField<float>(VT_WIDTH, 0.0f);
  }
  float height() const {
    return GetField<float>(VT_HEIGHT, 0.0f);
  }
  float sensitivity() const {
    return GetField<float>(VT_SENSITIVITY, 0.0f);
  }
  bool fast() const {
    return GetField<uint8_t>(VT_FAST, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGTOKEN) &&
           VerifyField<uint32_t>(verifier, VT_TRACKID) &&
           VerifyField<uint64_t>(verifier, VT_STARTTIME) &&
           VerifyField<uint64_t>(verifier, VT_ENDTIME) &&
           VerifyField<float>(verifier, VT_X) &&
           VerifyField<float>(verifier, VT_Y) &&
           VerifyField<float>(verifier, VT_WIDTH) &&
           VerifyField<float>(verifier, VT_HEIGHT) &&
           VerifyField<float>(verifier, VT_SENSITIVITY) &&
           VerifyField<uint8_t>(verifier, VT_FAST) &&
           verifier.EndTable();
  }
};

struct CreateFindMotionRequestBuilder {
  typedef CreateFindMotionRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recordingtoken(uint64_t recordingtoken) {
    fbb_.AddElement<uint64_t>(CreateFindMotionRequest::VT_RECORDINGTOKEN, recordingtoken, 0);
  }
  void add_trackid(uint32_t trackid) {
    fbb_.AddElement<uint32_t>(CreateFindMotionRequest::VT_TRACKID, trackid, 0);
  }
  void add_starttime(uint64_t starttime) {
    fbb_.AddElement<uint64_t>(CreateFindMotionRequest::VT_STARTTIME, starttime, 0);
  }
  void add_endtime(uint64_t endtime) {
    fbb_.AddElement<uint64_t>(CreateFindMotionRequest::VT_ENDTIME, endtime, 0);
  }
  void add_x(float x) {
    fbb_.AddElement<float>(CreateFindMotionRequest::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(CreateFindMotionRequest::VT_Y, y, 0.0f);
  }
  void add_width(float width) {
    fbb_.AddElement<float>(CreateFindMotionRequest::VT_WIDTH, width, 0.0f);
  }
  void add_height(float height) {
    fbb_.AddElement<float>(CreateFindMotionRequest::VT_HEIGHT, height, 0.0f);
  }
  void add_sensitivity(float sensitivity) {
    fbb_.AddElement<float>(CreateFindMotionRequest::VT_SENSITIVITY, sensitivity, 0.0f);
  }
  void add_fast(bool fast) {
    fbb_.AddElement<uint8_t>(CreateFindMotionRequest::VT_FAST, static_cast<uint8_t>(fast), 0);
  }
  explicit CreateFindMotionRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CreateFindMotionRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CreateFindMotionRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<CreateFindMotionRequest> CreateCreateFindMotionRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recordingtoken = 0,
    uint32_t trackid = 0,
    uint64_t starttime = 0,
    uint64_t endtime = 0,
    float x = 0.0f,
    float y = 0.0f,
    float width = 0.0f,
    float height = 0.0f,
    float sensitivity = 0.0f,
    bool fast = false) {
  CreateFindMotionRequestBuilder builder_(_fbb);
  builder_.add_endtime(endtime);
  builder_.add_starttime(starttime);
  builder_.add_recordingtoken(recordingtoken);
  builder_.add_sensitivity(sensitivity);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_trackid(trackid);
  builder_.add_fast(fast);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_CREATEFINDMOTIONREQUEST_MONOCLE_H_
