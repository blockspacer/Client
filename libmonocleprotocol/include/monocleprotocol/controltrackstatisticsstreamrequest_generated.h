// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct ControlTrackStatisticsStreamRequest;

struct ControlTrackStatisticsStreamRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_PLAYREQUESTINDEX = 6,
    VT_STARTTIME = 8,
    VT_ENDTIME = 10,
    VT_INTERVAL = 12
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  uint64_t playrequestindex() const {
    return GetField<uint64_t>(VT_PLAYREQUESTINDEX, 0);
  }
  uint64_t starttime() const {
    return GetField<uint64_t>(VT_STARTTIME, 0);
  }
  uint64_t endtime() const {
    return GetField<uint64_t>(VT_ENDTIME, 0);
  }
  uint64_t interval() const {
    return GetField<uint64_t>(VT_INTERVAL, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<uint64_t>(verifier, VT_PLAYREQUESTINDEX) &&
           VerifyField<uint64_t>(verifier, VT_STARTTIME) &&
           VerifyField<uint64_t>(verifier, VT_ENDTIME) &&
           VerifyField<uint64_t>(verifier, VT_INTERVAL) &&
           verifier.EndTable();
  }
};

struct ControlTrackStatisticsStreamRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamRequest::VT_TOKEN, token, 0);
  }
  void add_playrequestindex(uint64_t playrequestindex) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamRequest::VT_PLAYREQUESTINDEX, playrequestindex, 0);
  }
  void add_starttime(uint64_t starttime) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamRequest::VT_STARTTIME, starttime, 0);
  }
  void add_endtime(uint64_t endtime) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamRequest::VT_ENDTIME, endtime, 0);
  }
  void add_interval(uint64_t interval) {
    fbb_.AddElement<uint64_t>(ControlTrackStatisticsStreamRequest::VT_INTERVAL, interval, 0);
  }
  explicit ControlTrackStatisticsStreamRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ControlTrackStatisticsStreamRequestBuilder &operator=(const ControlTrackStatisticsStreamRequestBuilder &);
  flatbuffers::Offset<ControlTrackStatisticsStreamRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ControlTrackStatisticsStreamRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ControlTrackStatisticsStreamRequest> CreateControlTrackStatisticsStreamRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t playrequestindex = 0,
    uint64_t starttime = 0,
    uint64_t endtime = 0,
    uint64_t interval = 0) {
  ControlTrackStatisticsStreamRequestBuilder builder_(_fbb);
  builder_.add_interval(interval);
  builder_.add_endtime(endtime);
  builder_.add_starttime(starttime);
  builder_.add_playrequestindex(playrequestindex);
  builder_.add_token(token);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_CONTROLTRACKSTATISTICSSTREAMREQUEST_MONOCLE_H_
