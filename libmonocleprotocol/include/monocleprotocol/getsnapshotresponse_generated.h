// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GETSNAPSHOTRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_GETSNAPSHOTRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct GetSnapshotResponse;
struct GetSnapshotResponseBuilder;

struct GetSnapshotResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GetSnapshotResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4,
    VT_TIME = 6
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           verifier.EndTable();
  }
};

struct GetSnapshotResponseBuilder {
  typedef GetSnapshotResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(GetSnapshotResponse::VT_DATA, data);
  }
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(GetSnapshotResponse::VT_TIME, time, 0);
  }
  explicit GetSnapshotResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GetSnapshotResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetSnapshotResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetSnapshotResponse> CreateGetSnapshotResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0,
    uint64_t time = 0) {
  GetSnapshotResponseBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetSnapshotResponse> CreateGetSnapshotResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr,
    uint64_t time = 0) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return monocle::CreateGetSnapshotResponse(
      _fbb,
      data__,
      time);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_GETSNAPSHOTRESPONSE_MONOCLE_H_
