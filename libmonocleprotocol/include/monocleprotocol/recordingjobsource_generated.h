// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECORDINGJOBSOURCE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_RECORDINGJOBSOURCE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "recordingjobsourcetrack_generated.h"
#include "recordingjobsourcetype_generated.h"
#include "recordingjobstate_generated.h"

namespace monocle {

struct RecordingJobSource;
struct RecordingJobSourceBuilder;

struct RecordingJobSource FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingJobSourceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_TYPE = 6,
    VT_RECEIVER = 8,
    VT_RECORDINGJOBSOURCETRACKS = 10
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  monocle::RecordingJobSourceType type() const {
    return static_cast<monocle::RecordingJobSourceType>(GetField<int8_t>(VT_TYPE, 0));
  }
  uint64_t receiver() const {
    return GetField<uint64_t>(VT_RECEIVER, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrack>> *recordingjobsourcetracks() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrack>> *>(VT_RECORDINGJOBSOURCETRACKS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<uint64_t>(verifier, VT_RECEIVER) &&
           VerifyOffset(verifier, VT_RECORDINGJOBSOURCETRACKS) &&
           verifier.VerifyVector(recordingjobsourcetracks()) &&
           verifier.VerifyVectorOfTables(recordingjobsourcetracks()) &&
           verifier.EndTable();
  }
};

struct RecordingJobSourceBuilder {
  typedef RecordingJobSource Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(RecordingJobSource::VT_TOKEN, token, 0);
  }
  void add_type(monocle::RecordingJobSourceType type) {
    fbb_.AddElement<int8_t>(RecordingJobSource::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_receiver(uint64_t receiver) {
    fbb_.AddElement<uint64_t>(RecordingJobSource::VT_RECEIVER, receiver, 0);
  }
  void add_recordingjobsourcetracks(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrack>>> recordingjobsourcetracks) {
    fbb_.AddOffset(RecordingJobSource::VT_RECORDINGJOBSOURCETRACKS, recordingjobsourcetracks);
  }
  explicit RecordingJobSourceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingJobSource> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingJobSource>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingJobSource> CreateRecordingJobSource(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    monocle::RecordingJobSourceType type = monocle::RecordingJobSourceType::Media,
    uint64_t receiver = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingJobSourceTrack>>> recordingjobsourcetracks = 0) {
  RecordingJobSourceBuilder builder_(_fbb);
  builder_.add_receiver(receiver);
  builder_.add_token(token);
  builder_.add_recordingjobsourcetracks(recordingjobsourcetracks);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingJobSource> CreateRecordingJobSourceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    monocle::RecordingJobSourceType type = monocle::RecordingJobSourceType::Media,
    uint64_t receiver = 0,
    const std::vector<flatbuffers::Offset<monocle::RecordingJobSourceTrack>> *recordingjobsourcetracks = nullptr) {
  auto recordingjobsourcetracks__ = recordingjobsourcetracks ? _fbb.CreateVector<flatbuffers::Offset<monocle::RecordingJobSourceTrack>>(*recordingjobsourcetracks) : 0;
  return monocle::CreateRecordingJobSource(
      _fbb,
      token,
      type,
      receiver,
      recordingjobsourcetracks__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_RECORDINGJOBSOURCE_MONOCLE_H_
