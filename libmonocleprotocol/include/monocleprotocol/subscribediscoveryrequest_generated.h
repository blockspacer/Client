// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUBSCRIBEDISCOVERYREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_SUBSCRIBEDISCOVERYREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct SubscribeDiscoveryRequest;
struct SubscribeDiscoveryRequestBuilder;

struct SubscribeDiscoveryRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SubscribeDiscoveryRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BROADCAST = 4
  };
  bool broadcast() const {
    return GetField<uint8_t>(VT_BROADCAST, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BROADCAST) &&
           verifier.EndTable();
  }
};

struct SubscribeDiscoveryRequestBuilder {
  typedef SubscribeDiscoveryRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_broadcast(bool broadcast) {
    fbb_.AddElement<uint8_t>(SubscribeDiscoveryRequest::VT_BROADCAST, static_cast<uint8_t>(broadcast), 0);
  }
  explicit SubscribeDiscoveryRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SubscribeDiscoveryRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubscribeDiscoveryRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubscribeDiscoveryRequest> CreateSubscribeDiscoveryRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool broadcast = false) {
  SubscribeDiscoveryRequestBuilder builder_(_fbb);
  builder_.add_broadcast(broadcast);
  return builder_.Finish();
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_SUBSCRIBEDISCOVERYREQUEST_MONOCLE_H_
