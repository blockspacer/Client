// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECORDINGJOBSOURCETRACK_MONOCLE_H_
#define FLATBUFFERS_GENERATED_RECORDINGJOBSOURCETRACK_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "recordingjobstate_generated.h"

namespace monocle {

struct RecordingJobSourceTrack;
struct RecordingJobSourceTrackBuilder;

struct RecordingJobSourceTrack FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingJobSourceTrackBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_RECORDINGTRACK = 6,
    VT_PARAMETERS = 8,
    VT_STATE = 10,
    VT_ERROR = 12,
    VT_ACTIVEPARAMETERS = 14
  };
  uint64_t token() const {
    return GetField<uint64_t>(VT_TOKEN, 0);
  }
  uint64_t recordingtrack() const {
    return GetField<uint64_t>(VT_RECORDINGTRACK, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *parameters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PARAMETERS);
  }
  monocle::RecordingJobState state() const {
    return static_cast<monocle::RecordingJobState>(GetField<int8_t>(VT_STATE, 0));
  }
  const flatbuffers::String *error() const {
    return GetPointer<const flatbuffers::String *>(VT_ERROR);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *activeparameters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ACTIVEPARAMETERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TOKEN) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGTRACK) &&
           VerifyOffset(verifier, VT_PARAMETERS) &&
           verifier.VerifyVector(parameters()) &&
           verifier.VerifyVectorOfStrings(parameters()) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyString(error()) &&
           VerifyOffset(verifier, VT_ACTIVEPARAMETERS) &&
           verifier.VerifyVector(activeparameters()) &&
           verifier.VerifyVectorOfStrings(activeparameters()) &&
           verifier.EndTable();
  }
};

struct RecordingJobSourceTrackBuilder {
  typedef RecordingJobSourceTrack Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint64_t token) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrack::VT_TOKEN, token, 0);
  }
  void add_recordingtrack(uint64_t recordingtrack) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrack::VT_RECORDINGTRACK, recordingtrack, 0);
  }
  void add_parameters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> parameters) {
    fbb_.AddOffset(RecordingJobSourceTrack::VT_PARAMETERS, parameters);
  }
  void add_state(monocle::RecordingJobState state) {
    fbb_.AddElement<int8_t>(RecordingJobSourceTrack::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_error(flatbuffers::Offset<flatbuffers::String> error) {
    fbb_.AddOffset(RecordingJobSourceTrack::VT_ERROR, error);
  }
  void add_activeparameters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> activeparameters) {
    fbb_.AddOffset(RecordingJobSourceTrack::VT_ACTIVEPARAMETERS, activeparameters);
  }
  explicit RecordingJobSourceTrackBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingJobSourceTrack> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingJobSourceTrack>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingJobSourceTrack> CreateRecordingJobSourceTrack(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t recordingtrack = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> parameters = 0,
    monocle::RecordingJobState state = monocle::RecordingJobState::Idle,
    flatbuffers::Offset<flatbuffers::String> error = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> activeparameters = 0) {
  RecordingJobSourceTrackBuilder builder_(_fbb);
  builder_.add_recordingtrack(recordingtrack);
  builder_.add_token(token);
  builder_.add_activeparameters(activeparameters);
  builder_.add_error(error);
  builder_.add_parameters(parameters);
  builder_.add_state(state);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingJobSourceTrack> CreateRecordingJobSourceTrackDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t token = 0,
    uint64_t recordingtrack = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *parameters = nullptr,
    monocle::RecordingJobState state = monocle::RecordingJobState::Idle,
    const char *error = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *activeparameters = nullptr) {
  auto parameters__ = parameters ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*parameters) : 0;
  auto error__ = error ? _fbb.CreateString(error) : 0;
  auto activeparameters__ = activeparameters ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*activeparameters) : 0;
  return monocle::CreateRecordingJobSourceTrack(
      _fbb,
      token,
      recordingtrack,
      parameters__,
      state,
      error__,
      activeparameters__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_RECORDINGJOBSOURCETRACK_MONOCLE_H_
