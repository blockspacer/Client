// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RECORDINGJOBSOURCETRACKACTIVEPARAMETERSCHANGED_MONOCLE_H_
#define FLATBUFFERS_GENERATED_RECORDINGJOBSOURCETRACKACTIVEPARAMETERSCHANGED_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct RecordingJobSourceTrackActiveParametersChanged;
struct RecordingJobSourceTrackActiveParametersChangedBuilder;

struct RecordingJobSourceTrackActiveParametersChanged FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingJobSourceTrackActiveParametersChangedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDING = 4,
    VT_RECORDINGJOB = 6,
    VT_RECORDINGJOBSOURCE = 8,
    VT_RECORDINGJOBSOURCETRACK = 10,
    VT_ACTIVEPARAMETERS = 12
  };
  uint64_t recording() const {
    return GetField<uint64_t>(VT_RECORDING, 0);
  }
  uint64_t recordingjob() const {
    return GetField<uint64_t>(VT_RECORDINGJOB, 0);
  }
  uint64_t recordingjobsource() const {
    return GetField<uint64_t>(VT_RECORDINGJOBSOURCE, 0);
  }
  uint64_t recordingjobsourcetrack() const {
    return GetField<uint64_t>(VT_RECORDINGJOBSOURCETRACK, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *activeparameters() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ACTIVEPARAMETERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_RECORDING) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGJOB) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGJOBSOURCE) &&
           VerifyField<uint64_t>(verifier, VT_RECORDINGJOBSOURCETRACK) &&
           VerifyOffset(verifier, VT_ACTIVEPARAMETERS) &&
           verifier.VerifyVector(activeparameters()) &&
           verifier.VerifyVectorOfStrings(activeparameters()) &&
           verifier.EndTable();
  }
};

struct RecordingJobSourceTrackActiveParametersChangedBuilder {
  typedef RecordingJobSourceTrackActiveParametersChanged Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recording(uint64_t recording) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrackActiveParametersChanged::VT_RECORDING, recording, 0);
  }
  void add_recordingjob(uint64_t recordingjob) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrackActiveParametersChanged::VT_RECORDINGJOB, recordingjob, 0);
  }
  void add_recordingjobsource(uint64_t recordingjobsource) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrackActiveParametersChanged::VT_RECORDINGJOBSOURCE, recordingjobsource, 0);
  }
  void add_recordingjobsourcetrack(uint64_t recordingjobsourcetrack) {
    fbb_.AddElement<uint64_t>(RecordingJobSourceTrackActiveParametersChanged::VT_RECORDINGJOBSOURCETRACK, recordingjobsourcetrack, 0);
  }
  void add_activeparameters(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> activeparameters) {
    fbb_.AddOffset(RecordingJobSourceTrackActiveParametersChanged::VT_ACTIVEPARAMETERS, activeparameters);
  }
  explicit RecordingJobSourceTrackActiveParametersChangedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingJobSourceTrackActiveParametersChanged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingJobSourceTrackActiveParametersChanged>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingJobSourceTrackActiveParametersChanged> CreateRecordingJobSourceTrackActiveParametersChanged(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recording = 0,
    uint64_t recordingjob = 0,
    uint64_t recordingjobsource = 0,
    uint64_t recordingjobsourcetrack = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> activeparameters = 0) {
  RecordingJobSourceTrackActiveParametersChangedBuilder builder_(_fbb);
  builder_.add_recordingjobsourcetrack(recordingjobsourcetrack);
  builder_.add_recordingjobsource(recordingjobsource);
  builder_.add_recordingjob(recordingjob);
  builder_.add_recording(recording);
  builder_.add_activeparameters(activeparameters);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingJobSourceTrackActiveParametersChanged> CreateRecordingJobSourceTrackActiveParametersChangedDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t recording = 0,
    uint64_t recordingjob = 0,
    uint64_t recordingjobsource = 0,
    uint64_t recordingjobsourcetrack = 0,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *activeparameters = nullptr) {
  auto activeparameters__ = activeparameters ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*activeparameters) : 0;
  return monocle::CreateRecordingJobSourceTrackActiveParametersChanged(
      _fbb,
      recording,
      recordingjob,
      recordingjobsource,
      recordingjobsourcetrack,
      activeparameters__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_RECORDINGJOBSOURCETRACKACTIVEPARAMETERSCHANGED_MONOCLE_H_
