// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGTRACKLOGRESPONSE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGTRACKLOGRESPONSE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "logmessage_generated.h"
#include "severity_generated.h"

namespace monocle {

struct RecordingTrackLogMessages;
struct RecordingTrackLogMessagesBuilder;

struct SubscribeRecordingTrackLogResponse;
struct SubscribeRecordingTrackLogResponseBuilder;

struct RecordingTrackLogMessages FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RecordingTrackLogMessagesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOKEN = 4,
    VT_MESSAGES = 6
  };
  uint32_t token() const {
    return GetField<uint32_t>(VT_TOKEN, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>> *messages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>> *>(VT_MESSAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_TOKEN) &&
           VerifyOffset(verifier, VT_MESSAGES) &&
           verifier.VerifyVector(messages()) &&
           verifier.VerifyVectorOfTables(messages()) &&
           verifier.EndTable();
  }
};

struct RecordingTrackLogMessagesBuilder {
  typedef RecordingTrackLogMessages Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_token(uint32_t token) {
    fbb_.AddElement<uint32_t>(RecordingTrackLogMessages::VT_TOKEN, token, 0);
  }
  void add_messages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>>> messages) {
    fbb_.AddOffset(RecordingTrackLogMessages::VT_MESSAGES, messages);
  }
  explicit RecordingTrackLogMessagesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RecordingTrackLogMessages> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RecordingTrackLogMessages>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecordingTrackLogMessages> CreateRecordingTrackLogMessages(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t token = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::LogMessage>>> messages = 0) {
  RecordingTrackLogMessagesBuilder builder_(_fbb);
  builder_.add_messages(messages);
  builder_.add_token(token);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecordingTrackLogMessages> CreateRecordingTrackLogMessagesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t token = 0,
    const std::vector<flatbuffers::Offset<monocle::LogMessage>> *messages = nullptr) {
  auto messages__ = messages ? _fbb.CreateVector<flatbuffers::Offset<monocle::LogMessage>>(*messages) : 0;
  return monocle::CreateRecordingTrackLogMessages(
      _fbb,
      token,
      messages__);
}

struct SubscribeRecordingTrackLogResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SubscribeRecordingTrackLogResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RECORDINGTRACKLOGMESSAGES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingTrackLogMessages>> *recordingtracklogmessages() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingTrackLogMessages>> *>(VT_RECORDINGTRACKLOGMESSAGES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDINGTRACKLOGMESSAGES) &&
           verifier.VerifyVector(recordingtracklogmessages()) &&
           verifier.VerifyVectorOfTables(recordingtracklogmessages()) &&
           verifier.EndTable();
  }
};

struct SubscribeRecordingTrackLogResponseBuilder {
  typedef SubscribeRecordingTrackLogResponse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_recordingtracklogmessages(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingTrackLogMessages>>> recordingtracklogmessages) {
    fbb_.AddOffset(SubscribeRecordingTrackLogResponse::VT_RECORDINGTRACKLOGMESSAGES, recordingtracklogmessages);
  }
  explicit SubscribeRecordingTrackLogResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SubscribeRecordingTrackLogResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SubscribeRecordingTrackLogResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<SubscribeRecordingTrackLogResponse> CreateSubscribeRecordingTrackLogResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<monocle::RecordingTrackLogMessages>>> recordingtracklogmessages = 0) {
  SubscribeRecordingTrackLogResponseBuilder builder_(_fbb);
  builder_.add_recordingtracklogmessages(recordingtracklogmessages);
  return builder_.Finish();
}

inline flatbuffers::Offset<SubscribeRecordingTrackLogResponse> CreateSubscribeRecordingTrackLogResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<monocle::RecordingTrackLogMessages>> *recordingtracklogmessages = nullptr) {
  auto recordingtracklogmessages__ = recordingtracklogmessages ? _fbb.CreateVector<flatbuffers::Offset<monocle::RecordingTrackLogMessages>>(*recordingtracklogmessages) : 0;
  return monocle::CreateSubscribeRecordingTrackLogResponse(
      _fbb,
      recordingtracklogmessages__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_SUBSCRIBERECORDINGTRACKLOGRESPONSE_MONOCLE_H_
