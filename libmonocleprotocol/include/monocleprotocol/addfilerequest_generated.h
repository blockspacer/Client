// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ADDFILEREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_ADDFILEREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "filemonitorstate_generated.h"
#include "filestate_generated.h"

namespace monocle {

struct AddFileRequest;
struct AddFileRequestBuilder;

struct AddFileRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AddFileRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MOUNTPOINT = 4,
    VT_PATH = 6,
    VT_FILLDISK = 8,
    VT_NUMCHUNKS = 10,
    VT_CHUNKSIZE = 12,
    VT_AUTOMOUNT = 14,
    VT_STATE = 16,
    VT_MONITORSTATE = 18
  };
  const flatbuffers::String *mountpoint() const {
    return GetPointer<const flatbuffers::String *>(VT_MOUNTPOINT);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool filldisk() const {
    return GetField<uint8_t>(VT_FILLDISK, 0) != 0;
  }
  uint64_t numchunks() const {
    return GetField<uint64_t>(VT_NUMCHUNKS, 0);
  }
  uint64_t chunksize() const {
    return GetField<uint64_t>(VT_CHUNKSIZE, 0);
  }
  bool automount() const {
    return GetField<uint8_t>(VT_AUTOMOUNT, 0) != 0;
  }
  monocle::FileState state() const {
    return static_cast<monocle::FileState>(GetField<int8_t>(VT_STATE, 0));
  }
  monocle::FileMonitorState monitorstate() const {
    return static_cast<monocle::FileMonitorState>(GetField<int8_t>(VT_MONITORSTATE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MOUNTPOINT) &&
           verifier.VerifyString(mountpoint()) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyField<uint8_t>(verifier, VT_FILLDISK) &&
           VerifyField<uint64_t>(verifier, VT_NUMCHUNKS) &&
           VerifyField<uint64_t>(verifier, VT_CHUNKSIZE) &&
           VerifyField<uint8_t>(verifier, VT_AUTOMOUNT) &&
           VerifyField<int8_t>(verifier, VT_STATE) &&
           VerifyField<int8_t>(verifier, VT_MONITORSTATE) &&
           verifier.EndTable();
  }
};

struct AddFileRequestBuilder {
  typedef AddFileRequest Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mountpoint(flatbuffers::Offset<flatbuffers::String> mountpoint) {
    fbb_.AddOffset(AddFileRequest::VT_MOUNTPOINT, mountpoint);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(AddFileRequest::VT_PATH, path);
  }
  void add_filldisk(bool filldisk) {
    fbb_.AddElement<uint8_t>(AddFileRequest::VT_FILLDISK, static_cast<uint8_t>(filldisk), 0);
  }
  void add_numchunks(uint64_t numchunks) {
    fbb_.AddElement<uint64_t>(AddFileRequest::VT_NUMCHUNKS, numchunks, 0);
  }
  void add_chunksize(uint64_t chunksize) {
    fbb_.AddElement<uint64_t>(AddFileRequest::VT_CHUNKSIZE, chunksize, 0);
  }
  void add_automount(bool automount) {
    fbb_.AddElement<uint8_t>(AddFileRequest::VT_AUTOMOUNT, static_cast<uint8_t>(automount), 0);
  }
  void add_state(monocle::FileState state) {
    fbb_.AddElement<int8_t>(AddFileRequest::VT_STATE, static_cast<int8_t>(state), 0);
  }
  void add_monitorstate(monocle::FileMonitorState monitorstate) {
    fbb_.AddElement<int8_t>(AddFileRequest::VT_MONITORSTATE, static_cast<int8_t>(monitorstate), 0);
  }
  explicit AddFileRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<AddFileRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AddFileRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<AddFileRequest> CreateAddFileRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> mountpoint = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    bool filldisk = false,
    uint64_t numchunks = 0,
    uint64_t chunksize = 0,
    bool automount = false,
    monocle::FileState state = monocle::FileState::Unmounted,
    monocle::FileMonitorState monitorstate = monocle::FileMonitorState::Unavailable) {
  AddFileRequestBuilder builder_(_fbb);
  builder_.add_chunksize(chunksize);
  builder_.add_numchunks(numchunks);
  builder_.add_path(path);
  builder_.add_mountpoint(mountpoint);
  builder_.add_monitorstate(monitorstate);
  builder_.add_state(state);
  builder_.add_automount(automount);
  builder_.add_filldisk(filldisk);
  return builder_.Finish();
}

inline flatbuffers::Offset<AddFileRequest> CreateAddFileRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *mountpoint = nullptr,
    const char *path = nullptr,
    bool filldisk = false,
    uint64_t numchunks = 0,
    uint64_t chunksize = 0,
    bool automount = false,
    monocle::FileState state = monocle::FileState::Unmounted,
    monocle::FileMonitorState monitorstate = monocle::FileMonitorState::Unavailable) {
  auto mountpoint__ = mountpoint ? _fbb.CreateString(mountpoint) : 0;
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return monocle::CreateAddFileRequest(
      _fbb,
      mountpoint__,
      path__,
      filldisk,
      numchunks,
      chunksize,
      automount,
      state,
      monitorstate);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_ADDFILEREQUEST_MONOCLE_H_
